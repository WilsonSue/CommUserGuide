{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to our Introduction to PyCharm tutorial! In this comprehensive guide, we'll explore various essential features and functionalities within the powerful PyCharm Integrated Development Environment (IDE). Our primary focus will be on the following topics:</p> <ul> <li> <p>Adding external libraries, adding existing projects to Git, and how to use the debugger.</p> </li> <li> <p>We'll also cover troubleshooting and glossary terms.</p> </li> </ul> <p>By the end of this tutorial, you'll gain a solid understanding of basic PyCharm functionalities, allowing you to elevate your programming skills and streamline your development process.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>The intended users for this pycharm guide are for users who:</p> <ul> <li> <p>Are new to software development.</p> </li> <li> <p>Currently a student in post-secondary.</p> </li> </ul>"},{"location":"#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>Required prerequisite knowledge for this tutorial includes:</p> <ul> <li> <p>Knowing how to navigate files on your computer.</p> </li> <li> <p>Knowing how to enter commands in a terminal.</p> </li> </ul>"},{"location":"#required-software","title":"Required Software","text":"<p>This tutorial requires you to have:</p> <ul> <li> <p>A windows device.</p> </li> <li> <p>Python 3.10+ installed on your computer.</p> </li> <li> <p>PyCharm installed on your computer.</p> </li> <li> <p>A GitHub account.</p> </li> <li> <p>Github CLI installed on your computer.</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>The main sections of this guide are listed below:</p> <ul> <li>Adding an External Library</li> <li>Adding an Existing Project to Git</li> <li>How to Use the Debugger</li> <li>Troubleshooting</li> <li>Glossary</li> </ul>"},{"location":"Debugger/","title":"How to Use PyCharm's Debugger","text":""},{"location":"Debugger/#why-use-the-debugger","title":"Why Use the Debugger?","text":"<p>If you have a large block of code that ends up being very complex, it is useful to look at the code one line at a time. It may also be useful to look at the state of your variables, especially within a recursive function.</p> <p>PyCharm's debugger is easy to use once you know what everything does. It also works the same way in other JetBrains IDEs like CLion (C/C++) and IntelliJ (Java).</p>"},{"location":"Debugger/#1-select-the-line-you-want-to-examine","title":"1. Select the Line You Want to Examine","text":"<p>Here, we want to look at code starting from line 353.  </p>"},{"location":"Debugger/#2-click-on-the-left-side","title":"2. Click on the Left Side","text":"<p>A red dot will appear next to the line's number.  This red dot tells the debugger where to stop and examine the code.  If you don't do this, the code will run normally like when you press the run button.  </p>"},{"location":"Debugger/#3-click-on-the-debug-button","title":"3. Click on the Debug Button","text":"<p>The debug button is to the right of the run button. If you have done the previous step, a terminal will appear.</p> <p> </p> <p>Now the current line you are examining will be highlighted.  The next step will give you a short explanation of the terminal.  </p>"},{"location":"Debugger/#4-the-debug-terminal","title":"4. The Debug Terminal","text":"<p>At the top left corner you will see two tabs, the debugger and the console.  You will also see the rerun and stop functions along the left side.  </p> <p>The debugger tab will show the values of any variables created.  The variables are also displayed in orange text on the line of code they are assigned.  </p> <p>The console is useful for user inputs and print functions.  When you reach an input function, you can view the terminal to provide an input.  You will know when you can provide input when you see the green \"&gt;?\" symbol. </p> <p>You will also see five buttons displaying blue arrows near the top of the terminal.   The next three steps will tell you about the functions you will use the most while in the debugger.</p>"},{"location":"Debugger/#5-stepping-over","title":"5. Stepping Over","text":"<p>If you click the \"step over\" button, the debugger immediately examines the next line of code.   It doesn't matter if there is a function, the debugger will ignore any and all calls to other lines of code and will \"step over\" to the next line in the program. </p>"},{"location":"Debugger/#6-stepping-into","title":"6. Stepping Into","text":"<p>If you click the \"step into\" button when examining a line with a function call, the debugger will \"step into\" that function.   This means you can examine the code that runs within a function call. This is helpful when you are calling multiple functions within one function (eg. main). If there are no function calls in the current line, \"step into\" simply acts like \"step over\". </p>"},{"location":"Debugger/#7-stepping-out","title":"7. Stepping Out","text":"<p>If you click the \"step out\" button, the debugger will \"step out\" of the current function. </p> <p>This is useful when you are only looking at one part of a long function and need to return to the function call quickly.  </p>"},{"location":"Debugger/#8-adding-watches-watches-part-1","title":"8. Adding Watches (Watches Part 1)","text":"<p>Sometimes you need to check a value not assigned to a variable.  What you need to add is a watch.</p> <p></p> <p>Watches act like regular variables but unlike variables, they are not explicitly assigned.  These next steps will show you how to add your own watches to the debug console.</p>"},{"location":"Debugger/#9-select-a-line-of-code-watches-part-2","title":"9. Select a Line of Code (Watches Part 2)","text":"<p>Highlight a line of code that returns a value and copy it.  These are most commonly found in if statements that call functions though they can be found in other places. </p>"},{"location":"Debugger/#10-add-watch-to-the-debugger-watches-part-3","title":"10. Add Watch to the Debugger (Watches Part 3)","text":"<p>Paste that line of code in the text input line of the variables section of the debugger and click \"Add to Watches\".  </p> <p>You have successfully added a watch to your variables list!  Here is a video guide on how to do it.  </p>"},{"location":"ExistingProject/","title":"How to add Existing Pycharm Projects to GitHub","text":"<ol> <li>The first step is to enter the GitHub website (https://github.com/).</li> <li>Next is to login/signup if you don't have an account already.</li> <li>Now that you've logged in, click the \"+\" sign on the top right corner of the page and you\u2019ll see a drop down menu. Click on the first option that says  \u201cNew repository\u201d.</li> </ol> <p> 4. Enter the title for your repository. Optionally, add a readme.md and .gitignore file.</p> <p> 5. In your GitHub repository, click on the double square button on the right side to copy your github repository link.</p> <p> 6. The next step is to open the folder you want to place your repository inside of. To do so, enter the folder with left click. Next, right click and select the \u201cOpen in terminal\u201d option in the drop down menu.</p> <p> 7. Now that you\u2019re in the terminal, type \"git clone\" followed by a space and then paste the copied URL of the repository. Hit \"Enter\" to clone the repository to your local machine.</p> <p> 8. Drag the files and folders from your project directory into the repository folder in PyCharm. This will add your project files to the Git repository. 9. Once you have added the files, a popup window will ask if you want to add the file(s) to github in PyCharm. Click on add so you can commit and push the file. The file text should be green.</p> <p> 10. Left click the commit section on the left, then select all the files you wish to add to your repository.</p> <p> 11. Once you\u2019ve selected all the files, write a commit message in the box. Then click the \u201cCommit and Push\u201d button to add the files to your github repository.</p> <p></p>"},{"location":"ExistingProject/#great-job-your-existing-pycharm-project-is-now-added-to-git-and-any-changes-in-the-pycharm-project-will-be-tracked-and-can-be-pushed-to-your-remote-repository-on-github","title":"Great Job! Your existing PyCharm project is now added to Git and any changes in the PyCharm project will be tracked, and can be pushed to your remote repository on GitHub","text":""},{"location":"ExternalLibrary/","title":"How to add External Libraries to Projects","text":"<ol> <li>First, you want to start off with finding the external library you wish to add. In this tutorial I\u2019ll be choosing TensorFlow.</li> <li>Open PyCharm and the project you want to add the external library to.</li> <li>Click on \"File\" in the top left menu bar, and click on \"Settings\" with the wrench symbol beside it.</li> </ol> <p> 4. The next step is to click on the \"Project: Project name\" located on the left-hand menu. Under \u201cProject Settings\u201d, select the \"Python Interpreter\" text highlighted in blue. Note that Project name is substituted with the name of your project.</p> <p> 5. Once the Python Interpreter window is opened, a list of installed packages should be shown. To add a new package, click on the \"+\" button in the bottom left corner or use the keyboard shortcut \u201cAlt\u201d combined with \u201cInsert\u201d.</p> <p> 6. Now in the \"Available Packages\" window, type in the name of the package you want to install on the search bar located at the top. Alternatively, you can also look for your package by scrolling down. 7. Now that you've found the package, select it. Note that we suggest you tick the bar that says \u201cInstall the user\u2019s site packages directory (C:\\Users\\User\\LocationOfPythonFiles)\u201d. This is so that you can locate your package along with your other packages in case you want to find it.</p> <p> 8. Lastly, click on the \"Install Package\" button in the bottom left corner.</p> <p> 9. PyCharm will now install the package for you. The progress can be seen at the bottom of the PyCharm window.</p> <p> 10. When the package is finished installing. The package should be added to the list with the modules that you\u2019ve already had. 11. You can make sure if the packages are properly installed by typing \u201cimport (package name)\u201d into your project and the module name should appear in the drop down menu.</p> <p></p>"},{"location":"ExternalLibrary/#amazing-you-can-now-use-the-new-external-library-in-your-pycharm-project-note-that-if-youre-using-virtual-environmentsmake-sure-that-you-can-activate-the-correct-environment-before-installing-the-package","title":"Amazing! You can now use the new external library in your PyCharm project. Note that if you're using virtual environments,make sure that you can activate the correct environment before installing the package","text":""},{"location":"Glossary/","title":"Glossary","text":"Term Meaning CLI Command Line Interface / Terminal Interpreter A computer program that directly executes the code Compiler A computer program that translates the code into machine code Machine Code The language that the computer can understand Keyboard Shortcut A key combination on your keyboard that performs a specific task Debugging The process of finding and fixing errors in code IDE Integrated Development Environment Git A version control system that allows you to track changes to your code GitHub A website that hosts Git repositories Version Control A system that records changes to a file or set of files over time so that you can recall specific versions later Repository A folder that contains all of your project files Commit A snapshot of your code at a specific point in time Push Sending your code to a remote repository Pull Getting the latest code from a remote repository Package A collection of reusable code that are related Import A way to use code from another file URL A web address Dropdown A menu that appears when you click on a button README.md A file that contains information about your project .gitignore A file that tells Git which files to ignore Variable A container for a value Virtual Environment A tool that helps you keep dependencies required by different projects separate by creating isolated Python virtual environments for them"},{"location":"Troubleshooting/","title":"Troubleshooting","text":"Issue Potential Issues Solutions Connection refused Check your wifi connection or if you're properly signed into github on the terminal Uncommitted File Go to the commit section and add file to either commit or commit and push."}]}