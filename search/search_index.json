{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to our Introduction to PyCharm tutorial! In this comprehensive guide, we'll explore various essential features and functionalities within the powerful PyCharm Integrated Development Environment (IDE). Our primary focus will be on the following topics:</p> <ul> <li> <p>Adding external libraries.</p> </li> <li> <p>Adding existing projects to Git.</p> </li> <li> <p>Lastly, how to use the debugger.</p> </li> <li> <p>We'll also cover Troubleshooting and Glossary terms.</p> </li> </ul> <p>By the end of this tutorial, you'll gain a solid understanding of basic PyCharm functionalities, allowing you to elevate your programming skills and streamline your development process.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>The Intended Users for this PyCharm guide are for users who:</p> <ul> <li> <p>Are new to software development.</p> </li> <li> <p>Are new to PyCharm.</p> </li> </ul>"},{"location":"#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>Required prerequisite knowledge for this tutorial includes:</p> <ul> <li> <p>Knowing how to navigate files on your computer.</p> </li> <li> <p>Knowing how to enter commands in a terminal.</p> </li> </ul>"},{"location":"#required-software","title":"Required Software","text":"<p>This tutorial requires you to have:</p> <ul> <li> <p>A windows device.</p> </li> <li> <p>Python 3.10+ installed on your computer.</p> </li> <li> <p>PyCharm installed on your computer.</p> </li> <li> <p>A GitHub account.</p> </li> <li> <p>Github CLI installed on your computer.</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>The main sections of this guide are listed below:</p> <ul> <li>Adding an External Library</li> <li>Adding an Existing Project to Git</li> <li>How to Use the Debugger</li> <li>Troubleshooting</li> <li>Glossary</li> </ul>"},{"location":"Debugger/","title":"How to Use PyCharm's Debugger","text":""},{"location":"Debugger/#what-is-the-debugger","title":"What is the Debugger?","text":"<p>The debugger is a helpful tool included in all JetBrains IDEs. It gives you the ability to analyze at your code line by line to potentially find out what's wrong with it.</p>"},{"location":"Debugger/#why-use-the-debugger","title":"Why Use the Debugger?","text":"<p>If you have a large block of code that ends up being very complex, it is useful to look at the code one line at a time. It may also be useful to look at the state of your variables, especially within a recursive function.</p> <p>PyCharm's debugger is easy to use once you know what everything does. It also works the same way in other JetBrains IDEs like CLion (C/C++) and IntelliJ (Java).</p>"},{"location":"Debugger/#1-select-the-line-you-want-to-examine","title":"1. Select the Line You Want to Examine","text":"<p>Here, we want to look at code starting from line 353.  </p>"},{"location":"Debugger/#2-click-on-the-left-side","title":"2. Click on the Left Side","text":"<p>A red dot will appear next to the line's number.  This red dot is called a breakpoint.  It tells the debugger where to stop and examine the code.  </p>"},{"location":"Debugger/#3-click-on-the-debug-button","title":"3. Click on the Debug Button","text":"<p>The debug button is to the right of the run button. If you have done the previous step, a terminal will appear.  If you didn't create a breakpoint, clicking the debug button will be the same as clicking the run button.</p> <p> </p> <p>Now the current line you are examining will be highlighted.  The next step will give you a short explanation of the terminal.  </p>"},{"location":"Debugger/#4-the-debug-terminal","title":"4. The Debug Terminal","text":"<p>At the top left corner you will see two tabs, the debugger and the console.  You will also see the rerun and stop functions along the left side.  </p> <p>The debugger tab will show the values of any variables created.  The variables are also displayed in orange text on the line of code they are assigned.  </p> <p>The console is useful for user inputs and print functions.  When you reach an input function, you can view the terminal to provide an input.  You will know when you can provide input when you see the green \"&gt;?\" symbol. </p> <p>You will also see five buttons displaying blue arrows near the top of the terminal.   Go ahead and start to debug some of your own code if you haven't already.  The next three steps will tell you about the functions you will use the most while in the debugger.</p>"},{"location":"Debugger/#5-stepping-over","title":"5. Stepping Over","text":"<p>If you click the \"step over\" button, the debugger immediately examines the next line of code.   It doesn't matter if there is a function, the debugger will ignore any and all calls to other lines of code and will \"step over\" to the next line in the program. </p>"},{"location":"Debugger/#6-stepping-into","title":"6. Stepping Into","text":"<p>If you click the \"step into\" button when examining a line with a function call, the debugger will \"step into\" that function.   This means you can examine the code that runs within a function call. This is helpful when you are calling multiple functions within one function (eg. main). If there are no function calls in the current line, \"step into\" simply acts like \"step over\". </p>"},{"location":"Debugger/#7-stepping-out","title":"7. Stepping Out","text":"<p>If you click the \"step out\" button, the debugger will \"step out\" of the current function. </p> <p>This is useful when you are only looking at one part of a long function and need to return to the function call quickly.  </p>"},{"location":"Debugger/#8-adding-watches-watches-part-1","title":"8. Adding Watches (Watches Part 1)","text":"<p>Sometimes you need to check a value not assigned to a variable.  What you need to add is a watch.</p> <p></p> <p>Watches act like regular variables in the sense that they store values.  Unlike variables, watches are not explicitly assigned so they don't show up naturally in the terminal.  We will have to manually input these into the debugger terminal.</p> <p>Start debugging your code again if you have finished already.  These next steps will show you how to add your own watches to the debug console.</p>"},{"location":"Debugger/#9-select-a-line-of-code-watches-part-2","title":"9. Select a Line of Code (Watches Part 2)","text":"<p>Highlight a line of code that returns a value and copy it.  These are commonly found in \"if\" statements that call functions but, you can find these in other places too. </p>"},{"location":"Debugger/#10-add-watch-to-the-debugger-watches-part-3","title":"10. Add Watch to the Debugger (Watches Part 3)","text":"<p>Paste that line of code in the text input line of the variables section of the debugger and click \"Add to Watches\".  </p> <p>You have successfully added a watch to your variables list!  Here is a video guide on how to do it.  </p>"},{"location":"Debugger/#end-of-debugger-tutorial","title":"End of Debugger Tutorial","text":"<p>Now you know most of the basic functions of PyCharm's debugger!</p>"},{"location":"ExistingProject/","title":"How to add Existing Pycharm Projects to GitHub","text":""},{"location":"ExistingProject/#what-is-github","title":"What is GitHub?","text":"<p>GitHub is a web-based hosting service for version control using Git. It offers all of the distributed version control and source code management (SCM) functionality of Git as well as adding its own features. You can refer to our glossary on what is version control</p>"},{"location":"ExistingProject/#why-add-your-project-to-github","title":"Why add your project to GitHub?","text":"<p>In group projects, as a software developer it's quintessential to share your work with others.</p> <ul> <li> <p>Thus, adding your project to Github allows you to share your work with others and collaborate with them.</p> </li> <li> <p>Also, Github allows users to revert changes, track the code history, and have multiple versions of a project.</p> </li> <li> <p>Lastly, it's a portfolio for your projects which can be shared to potential employers.</p> </li> </ul> <p>Now that you've seen the benefits, let's get started!</p>"},{"location":"ExistingProject/#1-how-to-add-your-existing-pycharm-project-to-github","title":"1. How to add your existing PyCharm project to GitHub","text":"<p>The first step is to enter the GitHub website (https://github.com/).</p>"},{"location":"ExistingProject/#2-click-the-sign","title":"2. Click the \"+\" sign","text":"<p>The \"+\" Sign can be found at the top right corner of the page and you\u2019ll see a drop down menu. Click on the first option that says  \u201cNew repository\u201d.</p> <p></p>"},{"location":"ExistingProject/#3-enter-the-title-for-your-repository","title":"3. Enter the title for your repository","text":"<p>Optionally, you can add a readme.md and .gitignore file. A readme.md file is a text file that contains information about your project. A .gitignore file is a text file that tells Git which files or folders to ignore in a project. For example, if you have a folder that contains files that are not needed for your project, you can add the folder name to the .gitignore file so that Git will ignore the folder and its contents.</p> <p> </p>"},{"location":"ExistingProject/#4-click-on-the-copy-button-to-copy-the-url-of-your-repository","title":"4. Click on the copy button to copy the URL of your repository","text":"<p>To copy your Github repository click on the double square button on the right side.</p> <p></p>"},{"location":"ExistingProject/#5-enter-the-folder-you-want-to-place-your-repository-inside-of","title":"5. Enter the folder you want to place your repository inside of","text":"<p>Once you've done that, right click and select the \u201cOpen in terminal\u201d option in the drop down menu.</p> <p></p>"},{"location":"ExistingProject/#6-enter-git-clone-url-in-the-terminal","title":"6. Enter \"git clone (URL)\" in the terminal","text":"<p>In the terminal, type \"git clone\" followed by a space and then paste the copied URL of the repository. Hit \"Enter\" to clone the repository to your local machine. Note that the (URL) is substituted with the URL of your repository.</p> <p></p> <p>Once you've done that, you'll see a new folder in your project directory. This folder contains all the files and folders from your Github directory.</p>"},{"location":"ExistingProject/#7-add-your-pycharm-projects-to-your-github-repository","title":"7. Add your PyCharm Projects to your GitHub Repository","text":"<p>You can do so by dragging the files and folders from your project directory into the repository folder in PyCharm. This will add your project files to the Git repository.</p>"},{"location":"ExistingProject/#8-commit-your-files-to-github","title":"8. Commit your files to GitHub","text":"<p>Once you have added the files, a popup window will ask if you want to add the file(s) to github in PyCharm. Click on add so you can commit the file. The file text should be green.</p> <p></p>"},{"location":"ExistingProject/#9-push-your-files-to-github","title":"9. Push your files to GitHub","text":"<p>Once you\u2019ve selected all the files, write a commit message in the box. Then click the \u201cCommit and Push\u201d button to add the files to your github repository.</p> <p></p> <p>Great Job ! Your existing PyCharm project is now added to Git and any changes in the PyCharm project will be tracked, and can be pushed to your remote repository on GitHub .</p>"},{"location":"ExternalLibrary/","title":"How to add External Libraries to Projects","text":""},{"location":"ExternalLibrary/#what-is-an-external-library-and-why-use-it","title":"What is an External Library and why use it?","text":"<p>An external library is a collection of pre-written code that can be used in your project. It is a collection of functions and methods that you can use in your project without having to write them yourself. This is useful because it allows you to focus on the main aspects of your project, rather than having to write the code for the functions and methods yourself.</p>"},{"location":"ExternalLibrary/#1-find-the-external-library-you-want-to-add-to-your-project","title":"1. Find the External Library you want to add to your Project","text":"<p>Start off with finding the External Library you wish to add. In this tutorial, I\u2019ll be choosing TensorFlow.</p>"},{"location":"ExternalLibrary/#2-open-pycharm-and-the-project-you-want-to-add-the-external-library-to","title":"2. Open PyCharm and the project you want to add the external library to","text":""},{"location":"ExternalLibrary/#3-enter-the-settings-menu","title":"3. Enter the Settings menu","text":"<p>To do this, click on \"File\" in the top left menu bar, and click on \"Settings\" with the wrench symbol beside it.</p> <p></p>"},{"location":"ExternalLibrary/#4-enter-the-python-interpreter-menu","title":"4. Enter the Python Interpreter menu","text":"<p>The next step is to click on the \"Project: Project name\" located on the left-hand menu. Under \u201cProject Settings\u201d, select the \"Python Interpreter\" text highlighted in blue. Note that Project name is substituted with the name of your Project.</p> <p></p>"},{"location":"ExternalLibrary/#5-click-on-the-button","title":"5. Click on the \"+\" button","text":"<p>Once the Python Interpreter window is opened, a list of installed packages should be shown. To add a new package, click on the \"+\" button in the bottom left corner or use the keyboard shortcut \u201cAlt\u201d combined with \u201cInsert\u201d.</p> <p></p>"},{"location":"ExternalLibrary/#6-enter-the-name-of-the-package-you-want-to-install","title":"6. Enter the name of the package you want to install","text":"<p>In the \"Available Packages\" window, type in the name of the package you want to install on the search bar located at the top. Alternatively, you can also look for your package by scrolling down.</p>"},{"location":"ExternalLibrary/#7-select-the-external-library-to-download","title":"7. Select the External Library to download","text":"<p>Once you've found the package, select it. Note that we suggest you tick the bar that says \u201cInstall the user\u2019s site packages directory (C:\\Users\\User\\LocationOfPythonFiles)\u201d. This is so that you can locate your package along with your other packages in case you want to find it.</p>"},{"location":"ExternalLibrary/#8-install-the-external-library","title":"8. Install the External Library","text":"<p>Click on the \"Install Package\" button in the bottom left corner.</p> <p></p>"},{"location":"ExternalLibrary/#9-wait-for-the-external-library-to-install","title":"9. Wait for the External Library to install","text":"<p>PyCharm will now install the package for you. The progress can be seen at the bottom of the PyCharm window.</p>"},{"location":"ExternalLibrary/#double-check-if-the-external-library-is-installed","title":"Double Check if the External Library is installed","text":"<p>When the package is finished installing. The package should be added to the list with the modules that you\u2019ve already had. You can also make sure if the packages are properly installed by typing \u201cimport (package name)\u201d into your project and the module name should appear in the drop down menu.</p> <p></p> <p>Amazing! You can now use the new external library in your PyCharm project . Note that if you're using virtual environments,make sure that you can activate the correct environment before installing the package</p>"},{"location":"Glossary/","title":"Glossary","text":"Term Meaning CLI Command Line Interface / Terminal Interpreter A computer program that directly executes the code Compiler A computer program that translates the code into machine code Machine Code The language that the computer can understand Keyboard Shortcut A key combination on your keyboard that performs a specific task Debugging The process of finding and fixing errors in code IDE Integrated Development Environment Git A version control system that allows you to track changes to your code GitHub A website that hosts Git repositories Version Control A system that records changes to a file or set of files over time so that you can recall specific versions later Repository A folder that contains all of your project files Commit A snapshot of your code at a specific point in time Push Sending your code to a remote repository Pull Getting the latest code from a remote repository Package A collection of reusable code that are related Import A way to use code from another file URL A web address Dropdown A menu that appears when you click on a button README.md A file that contains information about your project .gitignore A file that tells Git which files to ignore Variable A container for a value Virtual Environment A tool that helps you keep dependencies required by different projects separate by creating isolated Python virtual environments for them Source code management A system that records changes to a file or set of files over time so that you can recall specific versions later"},{"location":"Troubleshooting/","title":"Troubleshooting","text":"<p>This page contains common issues and their solutions for PyCharm.</p> Issue Potential Issues Solutions Failure to connect to Github port Connection refused Check your wifi connection or if you're properly signed into github on the terminal File Text is red Untracked File Go to the commit section and add file to either commit or commit and push. Commit and Push button is greyed out No files to commit Add files to the commit section No Commit section Not logged into github or Not in a git repository Log into github in PyCharm and make sure you're in a git repository PyCharm not running/debugging your current file The run/debug config is set to the wrong file  Select \"current file\" in the run/debug menu.  Alternatively, just run the file's main function and it should be added to the run/debug configurations."}]}